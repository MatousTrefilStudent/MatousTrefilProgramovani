import math
import keyboard
import time
import os



consoleMenu="abcdefg"



def consoleSelection(list):
    index=0

    def keyboardPressed(event):
        nonlocal index
        if event.name == "up":
            index = (index - 1) % len(list)
        elif event.name == "down":
            index = (index + 1) % len(list)
        elif event.name == "enter":
            input()
            keyboard.unhook(hook)
        
        os.system("cls" if os.name == "nt" else "clear")
        print("Použij šipku nahoru/dolů pro výběr a Enter pro vybrání:")
        for i, item in enumerate(list):
            if index==i:
                print(f"> {item} <")
            else:
                print(f"  {item}")
        

    keyboardPressed(keyboard.KeyboardEvent("down", 28, "down"))
    hook=keyboard.on_press(keyboardPressed)
    while hook in keyboard._hooks:
        time.sleep(0.1)
    else:
        return list[index]
    
class Shape:
    def __init__(self, name):
        self.name = name
        self.sides = []
        self.angles = []
        if name == "trojúhelník":
            self.sides = [1 for i in range(3)]
            self.angles = [180 - 360/(len(self.sides)) for i in range(len(self.sides))]
        elif name == "čtyřúhelník":
            self.sides = [1 for i in range(4)]
            self.angles = [180 - 360/(len(self.sides)) for i in range(len(self.sides))]
        elif name == "pětiúhelník":
            self.sides = [1 for i in range(5)]
            self.angles = [180 - 360/(len(self.sides)) for i in range(len(self.sides))]
        elif name == "šestiúhelník":
            self.sides = [1 for i in range(6)]
            self.angles = [180 - 360/(len(self.sides)) for i in range(len(self.sides))]
        elif name == "sedmiúhelník":
            self.sides = [1 for i in range(7)]
            self.angles = [180 - 360/(len(self.sides)) for i in range(len(self.sides))]
        elif name == "osmiúhelník":
            self.sides = [1 for i in range(8)]
            self.angles = [180 - 360/(len(self.sides)) for i in range(len(self.sides))]
        print(self.sides)
        print(self.angles)

    def circumference(self):
        circumference = 0
        for i in self.sides:
            circumference += i
        return circumference
            

    def area(self):
        return round(self.calculateArea(self.sides.copy(), self.angles.copy()),3)
    
    def calculateArea(self, sides, angles):
        "calculates the area of a triangle (formula: 1/2 * a * b * sin(γ)) and than it ´subtracts´ the triangle from the shape and with recursion calculates rest"
        #print("area of triangle with sides "+str(sides[0])+" and "+str(sides[1])+" and angle "+str(angles[0])+"°")
        area =  math.sin(math.radians(angles[0])) * sides[0] * sides[1] / 2
        #print(angles, sides)
        #print(area)

        
        newSide = math.sqrt(sides[0]**2 + sides[1]**2 - 2 * sides[0] * sides[1] * math.cos(math.radians(angles[0])))

        sides.pop(0)


        sides[0] = newSide



        "arcsin(a·sin(C)/c)"

        firstNewAngle = angles[0] - math.degrees(math.asin(sides[1] * math.sin(math.radians(angles[0])) / newSide))

        #print(str(angles[-1])+ "\t-(180\t-\t"+str(firstNewAngle)+"\t-\t"+str(angles[0])+")")

        lastNewAngle = angles[-1] - (180 - math.degrees(math.asin(sides[1] * math.sin(math.radians(angles[0])) / newSide)) - angles[0])

        #print(angles)
        angles.pop(0)
        angles[0] = firstNewAngle
        angles[-1] = lastNewAngle
        # print(angles)

        #print("area"+str(area)+"\n"+"new side: "+str(newSide))

        if len(sides)+1== 3:
            #print(area)
            return area
        else:
            a= self.calculateArea(sides, angles)

            #print(area, "+", a, "=", str(area + a))
            return area + a
            "return area + Shape.calculateArea(self, sides, angles)"
    
    def newInput(self, sides, angles):
        self.sides = sides
        self.angles = angles

    def sameSidesInput(self, side):
        self.sides = [side for i in self.sides]

def drawPolygon(sides, angles):
    """Generated by copilot, slightly modified by me"""
    import matplotlib.pyplot as plt
    import numpy as np

    points = [[0,0]]
    currentAngle = 0

    for i, side in enumerate((sides)):
        currentAngle += angles[i-1]
        newX = points[-1][0] + side * math.cos(math.radians(currentAngle))
        newY = points[-1][1] + side * math.sin(math.radians(currentAngle))
        points.append([newX, newY])
    
    points.append(points[0])
    points = np.array(points)

    plt.figure()
    plt.plot(points[:,0], points[:,1], marker='o')
    plt.title('Polygon')
    plt.xlabel('X-axis')
    plt.ylabel('Y-axis')
    plt.axis('equal')
    plt.grid(True)
    plt.show()

    
shape = consoleSelection(["trojúhelník", "čtyřúhelník", "pětiúhelník", "šestiúhelník", "sedmiúhelník", "osmiúhelník"])
print(shape)
firstShape = Shape(shape)

actions = ["Změnit všechny strany na jednu hodnotu", "Změnit hodnotu pro libovolné strany a úhly", "Vypočítat obvod", "Vypočítat obsah", "Vykresli v MathPlotLib","Konec"]

while True:
    print("Co chcete udělat?")

    action = consoleSelection(actions)
    if action == actions[0]:
        while True:
            try:
                length = float(input("Zadejte hodnotu stran: "))
                if length > 0:
                    break
                else:
                    print("Hodnota strany musí být kladné číslo.")
            except ValueError:
                print("Hodnota musí být číslo.")
        firstShape.sameSidesInput(length)

    elif action == actions[1]:
        sides = firstShape.sides.copy()
        angles = firstShape.angles.copy()
        while True:
            menu =[]
            for i, side in enumerate(sides):
                menu.append(str(str(i)+". strana\t=\t"+ str(side)))
            for i, angle in enumerate(angles):
                menu.append(str(str(i)+". úhel\t=\t"+ str(angle)))
            menu.append("Zkontroloval jsem, že jsou strany a úhly v pořádku a chci je zadat.(původně to tenhle program měl dělat sám, ale to je na mě moc složité)")
            change = consoleSelection(menu)
            os.system("cls" if os.name == "nt" else "clear")
            
            if change == menu[-1]:
                firstShape.newInput(sides, angles)
                break

            for i in menu:
                if change == i:
                    print(i,"<-this will be replaced by new value")
                else:
                    print(i)
            while True:
                try:
                    newValue = float(input("Zadejte novou hodnotu pro " + change.split("\t")[0] + ": "))
                    if newValue > 0:
                        break
                    else:
                        print("Hodnota musí být kladné číslo.")
                except ValueError:
                    print("Hodnota musí být číslo.")

            if int(menu.index(change)) < len(sides):
                sides[menu.index(change)] = newValue
            else:
                angles[menu.index(change)-len(sides)] = newValue

    elif action == actions[2]:
        print("Obvod je: "+str(firstShape.circumference()))
    elif action == actions[3]:
        print("Obsah je: "+str(firstShape.area()))
    elif action == actions[4]:
        drawPolygon(firstShape.sides, firstShape.angles)
    input("\nEnter pro další akci...")

